     1                                  section .data
     2                                  ; сегмент инициализированных переменных
     3 00000000 526573756C743A200A      ExitMsg db "Result: ",10
     4                                  lenExit equ $-ExitMsg
     5 00000009 456E74657220737472-     EnterMsg db "Enter string:",10
     5 00000012 696E673A0A         
     6                                  lenM equ $-EnterMsg
     7                                  ; сегмент неинициализированных переменных
     8                                  section .bss
     9                                  ; буфер для вводимой строки
    10 00000000 <res 00000064>          InBuf resb 100
    11                                  lenIn equ $-InBuf
    12                                  section .text ; сегмент кода
    13                                  global _start
    14                                  _start:
    15                                      ; write
    16 00000000 B801000000                  mov rax, 1 ; системная функция 1 (write)
    17 00000005 BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    18 0000000A 48BE-                       mov rsi, EnterMsg ; адрес выводимой строки
    18 0000000C [0900000000000000] 
    19 00000014 BA0E000000                  mov rdx, lenM ; длина выводимой строки
    20 00000019 0F05                        syscall; вызов системной функции
    21                                      ; read
    22 0000001B B800000000                  mov rax, 0 ; системная функция 0 (read)
    23 00000020 BF00000000                  mov rdi, 0 ; дескриптор файла stdin=0
    24 00000025 48BE-                       mov rsi, InBuf ; адрес буфера ввода
    24 00000027 [0000000000000000] 
    25 0000002F BA64000000                  mov rdx, lenIn ; размер буфера
    26 00000034 0F05                        syscall ; вызов системной функции
    27                                      ; подсчет длины введенной строки до кода Enter
    28 00000036 488D3C25[00000000]          lea rdi, [InBuf] ; загружаем адрес строки в edi
    29 0000003E B908000000                  mov rcx, 8 ; загружаем размер буфера ввода
    30 00000043 B020                        mov al,' ' ; загружаем в al пробел для поиска
    31 00000045 BB00000000                  mov ebx,0 ; обнуляем счетчик пробелов
    32 0000004A FC                          cld
    33                                      
    34                                  cic1:
    35 0000004B 51                          push rcx
    36 0000004C 6683E301                    AND BX, 1; выполнить операцию AND с маской 1
    37 00000050 750C                        JNZ pod_swap ; перейти к метке pod_swap (если результат не равен 0)
    38 00000052 B909000000                  mov rcx, 9
    39 00000057 F2AE                        repne scasb ; проверяем очередной символ на пробел
    40 00000059 59                          pop rcx
    41 0000005A 7435                        je consl ; если пробел - меняем местами символы
    42 0000005C EB37                        jmp exit
    43                                  
    44                                  pod_swap: 
    45 0000005E 41B905000000                mov r9, 5 ; длина словa - 1
    46 00000064 51                          push rcx
    47 00000065 B903000000                  mov rcx, 3 ; загружаем количество повторений - длина слова / 2
    48 0000006A EB00                        jmp swap
    49                                  
    50                                  swap:
    51 0000006C 51                          push rcx
    52 0000006D 428A040F                    mov al, BYTE[rdi+r9]
    53 00000071 8A0F                        mov cl, BYTE[rdi]
    54 00000073 8807                        mov [rdi], al
    55 00000075 42880C0F                    mov [rdi+r9], cl
    56 00000079 4983E902                    sub r9, 2
    57 0000007D 48FFC7                      inc rdi
    58 00000080 59                          pop rcx
    59 00000081 E2E9                        loop swap
    60 00000083 BB00000000                  mov ebx, 0; обнуляем счетчик пробелов
    61 00000088 4883C704                    add rdi, 4; переходим к следующему слову
    62 0000008C B020                        mov al, ' '
    63 0000008E 59                          pop rcx
    64 0000008F E2BA                        loop cic1
    65                                     
    66 00000091 FFC3                    consl: inc ebx ; иначе - увеличиваем счетчик слов
    67 00000093 E2B6                           loop cic1
    68                                  
    69                                  exit: 
    70 00000095 56                          push rsi
    71                                      ;write text
    72 00000096 B801000000                  mov rax, 1 ; системная функция 1 (write)
    73 0000009B BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    74 000000A0 48BE-                       mov rsi, ExitMsg
    74 000000A2 [0000000000000000] 
    75 000000AA BA09000000                  mov rdx, lenExit ; длина строки
    76 000000AF 0F05                        syscall ; вызов системной функции
    77                                  
    78                                      ;write modified string
    79 000000B1 B801000000                  mov rax, 1 ; системная функция 1 (write)
    80 000000B6 BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    81 000000BB 5E                          pop rsi
    82 000000BC BA64000000                  mov rdx, lenIn ; длина строки
    83 000000C1 0F05                        syscall ; вызов системной функции
    84                                  
    85                                      ; exit
    86 000000C3 B83C000000                  mov rax, 60 ; системная функция 60 (exit)
    87 000000C8 4831FF                      xor rdi, rdi ; код возврата 0
    88 000000CB 0F05                        syscall ; вызов системной функции завершения
