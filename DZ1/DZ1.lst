     1                                  section .data
     2                                  ; сегмент инициализированных переменных
     3 00000000 526573756C743A200A      ExitMsg db "Result: ",10
     4                                  lenExit equ $-ExitMsg
     5 00000009 456E74657220737472-     EnterMsg db "Enter string:",10
     5 00000012 696E673A0A         
     6                                  lenM equ $-EnterMsg
     7                                  ; сегмент неинициализированных переменных
     8                                  section .bss
     9                                  ; буфер для вводимой строки
    10 00000000 <res 00000064>          InBuf resb 100
    11                                  lenIn equ $-InBuf
    12                                  section .text ; сегмент кода
    13                                  global _start
    14                                  _start:
    15                                      ; write
    16 00000000 B801000000                  mov rax, 1 ; системная функция 4 (write)
    17 00000005 BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    18 0000000A 48BE-                       mov rsi, EnterMsg ; адрес выводимой строки
    18 0000000C [0900000000000000] 
    19 00000014 BA0E000000                  mov rdx, lenM ; длина выводимой строки
    20 00000019 0F05                        syscall; вызов системной функции
    21                                      ; read
    22 0000001B B800000000                  mov rax, 0 ; системная функция 3 (read)
    23 00000020 BF00000000                  mov rdi, 0 ; дескриптор файла stdin=0
    24 00000025 48BE-                       mov rsi, InBuf ; адрес буфера ввода
    24 00000027 [0000000000000000] 
    25 0000002F BA64000000                  mov rdx, lenIn ; размер буфера
    26 00000034 0F05                        syscall ; вызов системной функции
    27                                      ; подсчет длины введенной строки до кода Enter
    28 00000036 488D3C25[00000000]          lea rdi, [InBuf] ; загружаем адрес строки в edi
    29 0000003E B964000000                  mov rcx,lenIn ; загружаем размер буфера ввода
    30 00000043 B020                        mov al,' ' ; загружаем в al пробел для поиска
    31 00000045 BB00000000                  mov ebx,0 ; обнуляем счетчик пробелов
    32 0000004A FC                          cld
    33                                      
    34                                  cic1:
    35 0000004B 6683E301                    AND BX, 1; выполнить операцию AND с маской 1
    36 0000004F 7505                        JNZ pod_swap ; перейти к метке swap (если результат не равен 0)
    37 00000051 AE                          scasb ; проверяем очередной символ на пробел
    38 00000052 7435                        je consl ; если пробел - меняем местами символы
    39 00000054 EB35                        jmp exit
    40                                  
    41                                  pod_swap: 
    42 00000056 41B905000000                mov r9, 5 ; длина словa - 1
    43 0000005C 51                          push rcx
    44 0000005D B903000000                  mov rcx, 3 ; загружаем количество повторений - длина слова / 2
    45 00000062 EB00                        jmp swap
    46                                  
    47                                  swap:
    48 00000064 51                          push rcx
    49 00000065 428A040F                    mov al, BYTE[rdi+r9]
    50 00000069 8A0F                        mov cl, BYTE[rdi]
    51 0000006B 8807                        mov [rdi], al
    52 0000006D 42880C0F                    mov [rdi+r9], cl
    53 00000071 4983E902                    sub r9, 2
    54 00000075 48FFC7                      inc rdi
    55 00000078 59                          pop rcx
    56 00000079 E2E9                        loop swap
    57 0000007B BB00000000                  mov ebx, 0; обнуляем счетчик пробелов
    58 00000080 4883C704                    add rdi, 4; переходим к следующему слову
    59 00000084 B020                        mov al, ' '
    60 00000086 59                          pop rcx
    61 00000087 E2C2                        loop cic1
    62                                     
    63 00000089 FFC3                    consl: inc ebx ; иначе - увеличиваем счетчик слов
    64                                  
    65 0000008B E2BE                    exit: loop cic1
    66 0000008D 56                          push rsi
    67                                      ;write text
    68 0000008E B801000000                  mov rax, 1 ; системная функция 1 (write)
    69 00000093 BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    70 00000098 48BE-                       mov rsi, ExitMsg
    70 0000009A [0000000000000000] 
    71 000000A2 BA09000000                  mov rdx, lenExit ; длина строки
    72 000000A7 0F05                        syscall ; вызов системной функции
    73                                  
    74                                      ;write modified string
    75 000000A9 B801000000                  mov rax, 1 ; системная функция 1 (write)
    76 000000AE BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    77 000000B3 5E                          pop rsi
    78 000000B4 BA64000000                  mov rdx, lenIn ; длина строки
    79 000000B9 0F05                        syscall ; вызов системной функции
    80                                  
    81                                      ; exit
    82 000000BB B83C000000                  mov rax, 60 ; системная функция 60 (exit)
    83 000000C0 4831FF                      xor rdi, rdi ; код возврата 0
    84 000000C3 0F05                        syscall ; вызов системной функции завершения
