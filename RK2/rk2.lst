     1                                  section .data
     2 00000000 01000000                    multi dd 1
     3 00000004 020000000100000002-         matrix dd 2, 1, 2, 3, 4, 5
     3 0000000D 000000030000000400-
     3 00000016 000005000000       
     4 0000001C 00000000FFFFFFFFFE-                dd 0, -1, -2, -3, -4, -5
     4 00000025 FFFFFFFDFFFFFFFCFF-
     4 0000002E FFFFFBFFFFFF       
     5 00000034 010000000100000001-                dd 1, 1, 1, 1, 1, 1
     5 0000003D 000000010000000100-
     5 00000046 000001000000       
     6 0000004C FEFFFFFFFDFFFFFFF8-                dd -2, -3, -8, -7, -9, -11
     6 00000055 FFFFFFF9FFFFFFF7FF-
     6 0000005E FFFFF5FFFFFF       
     7 00000064 02000000F8FFFFFF07-                dd 2, -8, 7, 16, 5, 4
     7 0000006D 000000100000000500-
     7 00000076 000004000000       
     8 0000007C 090000000B00000007-                dd 9, 11, 7, 8, 12, -3
     8 00000085 000000080000000C00-
     8 0000008E 0000FDFFFFFF       
     9                                  section .bss
    10 00000000 <res 00000002>              OutBuf resw 1
    11 00000002 <res 00000004>              result resd 1
    12                                  
    13                                  section .text
    14                                      global _start
    15                                      _start:
    16 00000000 8B0425[00000000]                mov eax, [multi]
    17                                  
    18 00000007 B906000000                      mov rcx, 6
    19 0000000C 41B905000000                    mov r9, 5
    20                                      mult:
    21 00000012 428B1C8D[04000000]              mov ebx, [matrix + 4 * r9]
    22 0000001A 83FB00                          cmp ebx, 0
    23 0000001D 7E0A                            JNG skip
    24 0000001F F7E3                            mul ebx
    25 00000021 4983C105                        add r9, 5
    26 00000025 E2EB                            loop mult
    27 00000027 EB09                            jmp check
    28                                      skip:
    29 00000029 48FFC9                          dec rcx
    30 0000002C 4983C105                        add r9, 5
    31 00000030 EBE0                            jmp mult
    32                                      check:
    33 00000032 8B1C25[04000000]                mov ebx, [matrix]
    34 00000039 83FB00                          cmp ebx, 0
    35 0000003C 7502                            jne output
    36 0000003E EB58                            jmp exit
    37                                      output:
    38 00000040 8B1C25[04000000]                mov ebx, [matrix]
    39 00000047 99                              cdq
    40 00000048 F7F3                            div ebx
    41 0000004A 890425[02000000]                mov [result], eax
    42 00000051 890425[18000000]                mov [matrix + 4 * 5], eax ; меняю элемент, стоящий в первой строке на последнем месте
    43                                  
    44 00000058 B924000000                      mov ecx, 36
    45 0000005D BB00000000                      mov rbx, 0
    46                                      cycl:
    47 00000062 51                              push rcx
    48 00000063 8B049D[04000000]                mov eax, [matrix + 4*rbx]
    49 0000006A 48FFC3                          inc rbx
    50 0000006D 48BE-                           mov rsi, OutBuf
    50 0000006F [0000000000000000] 
    51 00000077 E826000000                      call IntToStr64
    52 0000007C 4889C2                          mov rdx, rax ; помещаю длину числа в регистр r9
    53 0000007F B801000000                      mov rax, 1
    54 00000084 BF01000000                      mov rdi, 1
    55 00000089 48BE-                           mov rsi, OutBuf
    55 0000008B [0000000000000000] 
    56 00000093 0F05                            syscall
    57 00000095 59                              pop rcx
    58 00000096 E2CA                            loop cycl
    59                                      exit:
    60 00000098 4831FF                          xor rdi, rdi
    61 0000009B B83C000000                      mov rax, 60
    62 000000A0 0F05                            syscall
    63                                      
    64                                  %include "../lib64.asm"
     1                              <1> section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 000000A2 57                  <1>          push   rdi
     4 000000A3 53                  <1>          push   rbx
     5 000000A4 52                  <1>          push   rdx
     6 000000A5 51                  <1>          push   rcx
     7 000000A6 56                  <1> 		 push   rsi
     8 000000A7 C60600              <1> 		 mov    byte[rsi], 0 ; �� ����� �����
     9 000000AA 83F800              <1>          cmp    eax,0
    10 000000AD 7D05                <1>          jge    .l1
    11 000000AF F7D8                <1>          neg    eax
    12 000000B1 C6062D              <1>          mov    byte[rsi],'-'
    13 000000B4 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 000000B8 BF05000000          <1>          mov    rdi,5
    15 000000BD 66BB0A00            <1>          mov    bx,10
    16 000000C1 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 000000C3 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 000000C6 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 000000C9 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 000000CC 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 000000CF 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 000000D3 75EC                <1>          jne    .again
    24 000000D5 B906000000          <1>          mov    rcx, 6
    25 000000DA 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 000000DD 4889C8              <1> 		 mov    rax,rcx
    27 000000E0 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 000000E3 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 000000E6 56                  <1> 		 push   rsi
    30 000000E7 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 000000EB 5F                  <1> 		 pop    rdi
    32 000000EC F3A4                <1>          rep movsb
    33 000000EE 5E                  <1>          pop    rsi  
    34 000000EF 59                  <1>          pop    rcx
    35 000000F0 5A                  <1>          pop    rdx
    36 000000F1 5B                  <1>          pop    rbx
    37 000000F2 5F                  <1>          pop    rdi
    38 000000F3 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 000000F4 57                  <1>          push   rdi
    41 000000F5 B739                <1>          mov    bh, '9'
    42 000000F7 B330                <1>          mov    bl, '0'
    43 000000F9 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 000000FA 803E2D              <1>          cmp    byte[rsi], '-'
    45 000000FD 7503                <1>          jne    .prod
    46 000000FF 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000102 FC                  <1> .prod    cld
    48 00000103 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 00000106 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 00000107 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 00000109 741F                <1>          je     .Return
    52 0000010B 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 0000010D 722F                <1>          jb     .Error  ; "����" � ������
    54 0000010F 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 00000111 772B                <1>          ja     .Error  ; "����" � ������
    56 00000113 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 00000115 6698                <1>          cbw            ; ��������� �� �����
    58 00000117 6650                <1>          push   ax      ; ��������� � �����
    59 00000119 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 0000011D 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 00000120 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000122 6601F8              <1>          add    ax, di
    63 00000125 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 00000128 EBDC                <1>          jmp    .cycle
    65 0000012A 5E                  <1> .Return: pop    rsi
    66 0000012B BB00000000          <1>          mov    rbx, 0
    67 00000130 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000133 7503                <1>          jne    .J
    69 00000135 66F7DF              <1>          neg    di
    70 00000138 6689F8              <1> .J       mov    ax, di
    71 0000013B 98                  <1>          cwde
    72 0000013C EB0B                <1>          jmp    .R
    73 0000013E 5E                  <1> .Error:  pop    rsi
    74 0000013F B800000000          <1>          mov    rax, 0
    75 00000144 BB01000000          <1>          mov    rbx, 1
    76 00000149 5F                  <1> .R       pop    rdi
    77 0000014A C3                  <1>          ret
