     1                                  %include "../lib64.asm"
     1                              <1> section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi], 0 ; �� ����� �����
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    54 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    56 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 00000073 6698                <1>          cbw            ; ��������� �� �����
    58 00000075 6650                <1>          push   ax      ; ��������� � �����
    59 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                  ; сегмент инициализированных переменных
     5 00000000 456E746572206B3A0A-     DopMsg dq "Enter k:", 10
     5 00000009 00000000000000     
     6                                  lenDop equ $-DopMsg
     7                                  
     8 00000010 4469766973696F6E20-     ZeroMsg dq "Division by zero", 10
     8 00000019 6279207A65726F0A00-
     8 00000022 000000000000       
     9                                  lenZero equ $-ZeroMsg
    10                                  
    11 00000028 456E74657220612C20-     Msg dq "Enter a, m", 10 ; выводимое сообщение
    11 00000031 6D0000000000000A00-
    11 0000003A 000000000000       
    12 00000040 18                      len db $-Msg
    13                                  
    14                                  ; сегмент неинициализированных переменных
    15                                  section .bss
    16 00000000 <res 0000000A>          OutBuf resb 10 ; буфер для вводимой строки
    17                                  lenOut equ $-OutBuf
    18 0000000A <res 0000000A>          CBuf resb 10 ; буфер для вводимой строки
    19                                  lenC equ $-CBuf
    20 00000014 <res 00000002>          X resw 1
    21 00000016 <res 0000000A>          InBuf resb 10
    22                                  lenIn equ $-InBuf
    23 00000020 <res 00000004>          a resd 1
    24 00000024 <res 00000004>          m resd 1
    25 00000028 <res 00000004>          k resd 1
    26 0000002C <res 00000002>          result resw 1
    27                                  ; lenIn equ $-InBuf
    28                                  section .text
    29                                  global _start
    30                                  _start:
    31                                  
    32                                      ;write
    33 000000A9 B801000000                  mov rax, 1 ; системная функция 1 (write)
    34 000000AE BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    35 000000B3 48BE-                       mov rsi, Msg ; адрес выводимой строки
    35 000000B5 [2800000000000000] 
    36 000000BD 48BA-                       mov rdx, len ; длина строки
    36 000000BF [4000000000000000] 
    37 000000C7 0F05                        syscall
    38                                  
    39                                      ; read a
    40 000000C9 B800000000                  mov rax, 0 ; системная функция 0 (read)
    41 000000CE BF00000000                  mov rdi, 0 ; дескриптор файла stdin=1
    42 000000D3 48BE-                       mov rsi, InBuf ; адрес вводимой строки
    42 000000D5 [1600000000000000] 
    43 000000DD BA06000000                  mov rdx, 6 ; длина строки
    44 000000E2 0F05                        syscall ; вызов системной функции
    45 000000E4 48BE-                       mov rsi, InBuf ; адрес введеной строки
    45 000000E6 [1600000000000000] 
    46 000000EE E85FFFFFFF                  call StrToInt64 ; преобразование введеной строки в число
    47 000000F3 48890425[20000000]          mov [a], rax ; запись введеного числа в переменную а
    48                                  
    49                                      ; read m
    50 000000FB B800000000                  mov rax, 0
    51 00000100 BF00000000                  mov rdi, 0
    52 00000105 48BE-                       mov rsi, InBuf
    52 00000107 [1600000000000000] 
    53 0000010F BA06000000                  mov rdx, 6
    54 00000114 0F05                        syscall
    55 00000116 48BE-                       mov rsi, InBuf
    55 00000118 [1600000000000000] 
    56 00000120 E82DFFFFFF                  call StrToInt64
    57 00000125 48890425[24000000]          mov [m], rax
    58                                  
    59                                      ; solve
    60 0000012D 8B0425[24000000]            mov EAX, [m]
    61 00000134 8B1C25[20000000]            mov EBX, [a]
    62 0000013B 39D8                        cmp EAX, EBX
    63 0000013D 7E39                        JLE else
    64 0000013F 83E805                      sub EAX, 5 
    65 00000142 890425[2C000000]            mov [result], EAX
    66 00000149 E99F000000                  JMP exit
    67                                      
    68                                  
    69                                     
    70                                  
    71                                      ; write
    72 0000014E 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
    72 00000150 [0000000000000000] 
    73 00000158 488B0425[2C000000]          mov rax, [result]
    74 00000160 98                          cwde
    75 00000161 E89AFEFFFF                  call IntToStr64
    76 00000166 4889C5                      mov rbp, rax
    77 00000169 B801000000                  mov rax, 1 ; системная функция 1 (write)
    78 0000016E BF01000000                  mov rdi, 1 ; дескриптор файла stdout=1
    79 00000173 4889EA                      mov rdx, rbp ; длина выводимой строки
    80 00000176 0F05                        syscall ; вызов системной функции
    81                                  
    82                                  
    83                                  
    84                                      else:
    85                                          ;write
    86 00000178 B801000000                      mov rax, 1 ; системная функция 1 (write)
    87 0000017D BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
    88 00000182 48BE-                           mov rsi, DopMsg ; адрес выводимой строки
    88 00000184 [0000000000000000] 
    89 0000018C BA10000000                      mov rdx, lenDop ; длина строки
    90 00000191 0F05                            syscall
    91                                  
    92                                          ;read k
    93 00000193 B800000000                      mov rax, 0
    94 00000198 BF00000000                      mov rdi, 0
    95 0000019D 48BE-                           mov rsi, InBuf
    95 0000019F [1600000000000000] 
    96 000001A7 BA04000000                      mov rdx, 4
    97 000001AC 0F05                            syscall
    98 000001AE 48BE-                           mov rsi, InBuf
    98 000001B0 [1600000000000000] 
    99 000001B8 E895FEFFFF                      call StrToInt64
   100 000001BD 48890425[28000000]              mov [k], rax
   101                                  
   102                                  
   103                                          ; check k
   104 000001C5 4883F800                        cmp rax, 0
   105 000001C9 7456                            je zero 
   106                                  
   107                                          ;solve
   108 000001CB 8B0425[24000000]                mov EAX, [m]
   109 000001D2 8B1C25[20000000]                mov EBX, [a]
   110 000001D9 F7EB                            imul EBX
   111 000001DB 8B0C25[28000000]                mov ECX, [k]
   112 000001E2 F7F9                            idiv ECX
   113 000001E4 890425[2C000000]                mov [result], EAX
   114                                  
   115 000001EB EB00                            jmp exit
   116                                  
   117                                      exit: 
   118                                          ; write
   119 000001ED 48BE-                           mov rsi, OutBuf ; адрес выводимой строки
   119 000001EF [0000000000000000] 
   120 000001F7 488B0425[2C000000]              mov rax, [result] ; загрузка числа в регистр
   121 000001FF 98                              cwde ; развертывание числа из АХ в ЕАХ
   122 00000200 E8FBFDFFFF                      call IntToStr64 ; преобразование числа в строку
   123 00000205 4889C5                          mov rbp, rax ; длина строки
   124 00000208 B801000000                      mov rax, 1 ; системная функция 1 (write)
   125 0000020D BF01000000                      mov rdi, 1 ; дескриптор файла stdout=1
   126 00000212 4889EA                          mov rdx, rbp ; длина выводимой строки
   127 00000215 0F05                            syscall ; вызов системной функции
   128 00000217 B83C000000                      mov rax, 60 ; системная функция 60 (exit)
   129 0000021C 4831FF                          xor rdi, rdi ; return code 0
   130 0000021F 0F05                            syscall 
   131                                  
   132                                      zero:
   133 00000221 B801000000                      mov rax, 1; системная функция 1 (write)
   134 00000226 BF01000000                      mov rdi, 1; дескриптор файла stdout=1
   135 0000022B 48BE-                           mov rsi, ZeroMsg ; адрес выводимой строки
   135 0000022D [1000000000000000] 
   136 00000235 BA18000000                      mov rdx, lenZero ; длина строки
   137 0000023A 0F05                            syscall
   138 0000023C B83C000000                      mov rax, 60 ; системная функция 60 (exit)
   139 00000241 4831FF                          xor rdi, rdi ; return code 0
   140 00000244 0F05                            syscall
